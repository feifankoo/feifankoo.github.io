<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python笔记本_数据探索与清洗</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python_%E6%95%B0%E6%8D%AE%E6%8E%A2%E7%B4%A2%E4%B8%8E%E6%B8%85%E6%B4%97.html</url>
    <content><![CDATA[<p>开始数据分析或建模之前，需要对数据进行初步的探索以及简单的清洗和处理。本篇整理了常用的pandas语句。其中包括：</p>
<ul>
<li>导包/设置</li>
<li>导入、导出文件</li>
<li>查看数据的基础信息</li>
<li>行列的增删查改</li>
<li>行列筛选</li>
<li>变量处理<ul>
<li>分类变量</li>
<li>数值变量</li>
<li>日期变量</li>
</ul>
</li>
<li>缺失值处理</li>
<li>表连接</li>
<li>数据分组和计算Groupby</li>
</ul>
<h1 id="导包-设置"><a href="#导包-设置" class="headerlink" title="导包/设置"></a>导包/设置</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment">#忽略warnings</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#改变当前工作目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">r&quot;C:\Users\Desktop\Python&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示数据中所有的列</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<h1 id="导入-导出文件"><a href="#导入-导出文件" class="headerlink" title="导入/导出文件"></a>导入/导出文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入excel文件，指定列的变量类型</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;order.xlsx&#x27;</span>, dtype = &#123;<span class="string">&#x27;order_no&#x27;</span> : <span class="built_in">str</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入excel文件，指定工作表和标题行</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;sales.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;sheet1&#x27;</span>, header=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#导出到excel文件</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;date.xlsx&#x27;</span>, index=<span class="literal">False</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存到csv文件</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;data.csv&#x27;</span>,index=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h1 id="初步认识数据"><a href="#初步认识数据" class="headerlink" title="初步认识数据"></a>初步认识数据</h1><h2 id="整体数据"><a href="#整体数据" class="headerlink" title="整体数据"></a>整体数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看数据集基本信息</span></span><br><span class="line">data.info(verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查是否有缺失值</span></span><br><span class="line">data.isnull().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数值变量的统计信息</span></span><br><span class="line">data.describe().T</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的行数和列数</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Num of rows: &quot;</span> + <span class="built_in">str</span>(data.shape[<span class="number">0</span>])) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Num of columns: &quot;</span> + <span class="built_in">str</span>(data.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="单变量"><a href="#单变量" class="headerlink" title="单变量"></a>单变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看变量unique值的个数</span></span><br><span class="line">print(<span class="string">&quot;用户数为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>( <span class="built_in">len</span>(<span class="built_in">set</span>(data[<span class="string">&#x27;user_id&#x27;</span>])) ))</span><br><span class="line">print(<span class="string">&quot;订单数为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>( <span class="built_in">len</span>(<span class="built_in">set</span>(data[<span class="string">&#x27;order_no&#x27;</span>])) ))</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个变量的全部取值</span></span><br><span class="line"><span class="built_in">set</span>(data[<span class="string">&#x27;user&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出某个变量的全部取值</span></span><br><span class="line">data[<span class="string">&#x27;user&#x27;</span>].unique()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个变量的取值及相应的数量</span></span><br><span class="line">data[<span class="string">&#x27;user&#x27;</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个变量的非缺失值和缺失值数量分布</span></span><br><span class="line">data[<span class="string">&#x27;type&#x27;</span>].isnull().value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算某个变量的百分位数</span></span><br><span class="line">df[<span class="string">&#x27;物流时间&#x27;</span>].quantile(<span class="number">0.8</span>) </span><br></pre></td></tr></table></figure>


<h2 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">df = df.sort_values(by = [<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">df.sort_values(by=<span class="string">&#x27;date&#x27;</span>,ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h1 id="列操作-增删查改"><a href="#列操作-增删查改" class="headerlink" title="列操作-增删查改"></a>列操作-增删查改</h1><h2 id="删除指定列"><a href="#删除指定列" class="headerlink" title="删除指定列"></a>删除指定列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">to_drop = [<span class="string">&#x27;code&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">data2 = data.drop(to_drop, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">data.drop(columns=[<span class="string">&#x27;code&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>],inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="重命名列"><a href="#重命名列" class="headerlink" title="重命名列"></a>重命名列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">data.columns = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;amount&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">data.rename(columns=&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;user_type&quot;</span>,<span class="string">&quot;n&quot;</span>:<span class="string">&quot;count&quot;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="筛选数据"><a href="#筛选数据" class="headerlink" title="筛选数据"></a>筛选数据</h1><h2 id="重复项"><a href="#重复项" class="headerlink" title="重复项"></a>重复项</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除重复项并保留第一个记录</span></span><br><span class="line">df2 = df.drop_duplicates(subset=[<span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;user&#x27;</span>], keep=<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除重复项</span></span><br><span class="line">df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选重复行</span></span><br><span class="line">df[df.duplicated([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;score&#x27;</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重复行</span></span><br><span class="line">print(<span class="string">&quot;重复值共有:&#123;&#125;行&quot;</span>.<span class="built_in">format</span>(df.duplicated().<span class="built_in">sum</span>()))</span><br></pre></td></tr></table></figure>

<h2 id="筛选行"><a href="#筛选行" class="headerlink" title="筛选行"></a>筛选行</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据变量的值筛选行</span></span><br><span class="line">df[df.<span class="built_in">type</span> == <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">df[df.status != <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df[df[<span class="string">&#x27;type&#x27;</span>].isin([<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;K&#x27;</span>])]</span><br><span class="line"></span><br><span class="line">sample[sample[<span class="string">&#x27;score&#x27;</span>].between(<span class="number">70</span>,<span class="number">80</span>,inclusive=<span class="literal">True</span>)]</span><br><span class="line"></span><br><span class="line">df[(df.date &gt;= <span class="number">20200501</span> ) &amp; (df.amount &gt;= <span class="number">3000</span>)]</span><br><span class="line"></span><br><span class="line">df.query(<span class="string">&#x27;score &gt; 90&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选变量name以M开头的行</span></span><br><span class="line">df[df[<span class="string">&#x27;name&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&#x27;[M]+&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据取数窗口筛选行</span></span><br><span class="line">df2 = df[df.dayA &gt; df.dayB][df.dayA &lt; df.dayB + datetime.timedelta(days=<span class="number">365</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#loc</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;type&#x27;</span>].isna()==<span class="literal">True</span> &amp; df[<span class="string">&#x27;name&#x27;</span>].notnull()]</span><br><span class="line"></span><br><span class="line">df.loc[df[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;B&quot;</span>]</span><br><span class="line">df.loc[lc[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;B&quot;</span>, [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;amount&quot;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据位置筛选行：选取0-199行</span></span><br><span class="line">data.loc[<span class="number">0</span>:<span class="number">200</span>,:]</span><br></pre></td></tr></table></figure>
<h2 id="筛选列"><a href="#筛选列" class="headerlink" title="筛选列"></a>筛选列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过列名选取列</span></span><br><span class="line">df2 = df[[<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;user&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过列的位置选取列</span></span><br><span class="line">x = data[columns[:-<span class="number">1</span>]]</span><br><span class="line">y = data[columns[-<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>


<h1 id="变量处理"><a href="#变量处理" class="headerlink" title="变量处理"></a>变量处理</h1><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#日期转换成整数变量</span></span><br><span class="line">df[<span class="string">&#x27;order_date&#x27;</span>,<span class="string">&#x27;ship_date&#x27;</span>].astype(<span class="string">&#x27;int&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分类变量转换成数值变量</span></span><br><span class="line">data[<span class="string">&#x27;Total&#x27;</span>] = pd.to_numeric(data[<span class="string">&#x27;Total&#x27;</span>], errors = <span class="string">&#x27;coerce&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据格式化：字符串$1,100 变成 数值 1100</span></span><br><span class="line">data[<span class="string">&#x27;amount2&#x27;</span>] = data[<span class="string">&#x27;amount&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(x[<span class="number">1</span>:].split(<span class="string">&#x27;,&#x27;</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;2021-05-01&#x27;格式转换为日期变量</span></span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;date&#x27;</span>], <span class="built_in">format</span>=<span class="string">&quot;Y%-m%-d%&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="分类变量"><a href="#分类变量" class="headerlink" title="分类变量"></a>分类变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#变量字符串大写</span></span><br><span class="line">data[<span class="string">&#x27;type&#x27;</span>] = data[<span class="string">&#x27;type&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">str</span>(x).upper())</span><br><span class="line"></span><br><span class="line"><span class="comment">#首字母大写/ 大小写</span></span><br><span class="line">data[<span class="string">&#x27;origin&#x27;</span>].<span class="built_in">str</span>.capitalize()    </span><br><span class="line">data[<span class="string">&#x27;origin&#x27;</span>].<span class="built_in">str</span>.upper()        </span><br><span class="line">data[<span class="string">&#x27;origin&#x27;</span>].<span class="built_in">str</span>.lower()   </span><br><span class="line"></span><br><span class="line"><span class="comment">#变量值替换</span></span><br><span class="line">data[<span class="string">&#x27;country&#x27;</span>].replace(<span class="string">&quot;america&quot;</span>,<span class="string">&quot;US&quot;</span>,inplace=<span class="literal">True</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除变量前后的空格</span></span><br><span class="line">df[<span class="string">&#x27;type&#x27;</span>] = df[<span class="string">&#x27;type&#x27;</span>].apply(<span class="keyword">lambda</span> s : <span class="built_in">str</span>(s).strip())</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换成数值类型</span></span><br><span class="line">data[<span class="string">&#x27;income&#x27;</span>] = pd.to_numeric(data[<span class="string">&#x27;income&#x27;</span>], errors = <span class="string">&#x27;coerce&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#变量取值一一映射成生成新列</span></span><br><span class="line">new = &#123;<span class="string">&#x27;B&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;D&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">data[<span class="string">&#x27;type&#x27;</span>] = data.<span class="built_in">type</span>.<span class="built_in">map</span>(new)</span><br><span class="line"></span><br><span class="line"><span class="comment">#变量取值一一映射成数值</span></span><br><span class="line">data[<span class="string">&#x27;gender&#x27;</span>].replace([<span class="string">&#x27;Male&#x27;</span>,<span class="string">&#x27;Female&#x27;</span>],[<span class="number">0</span>,<span class="number">1</span>],inplace=<span class="literal">True</span>)</span><br><span class="line">data[<span class="string">&#x27;online&#x27;</span>].replace([<span class="string">&#x27;No&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>,<span class="string">&#x27;Not yet&#x27;</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据列值生成新的数值变量</span></span><br><span class="line">df.loc[df[<span class="string">&quot;income&quot;</span>] == <span class="string">&#x27;&gt;50K&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>] = <span class="number">1</span></span><br><span class="line">df.loc[df[<span class="string">&quot;income&quot;</span>] != <span class="string">&#x27;&gt;50K&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取字符串中的特定部分:&#x27;2021-05-01&#x27;</span></span><br><span class="line">data[<span class="string">&#x27;year&#x27;</span>] = data.Date.apply(<span class="keyword">lambda</span> x: x.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">data[<span class="string">&#x27;month&#x27;</span>] = data.Date.apply(<span class="keyword">lambda</span> x: x.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">data[<span class="string">&#x27;day&#x27;</span>] = data.Date.apply(<span class="keyword">lambda</span> x: x.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Apply: 对列应用函数</span></span><br><span class="line">t2[<span class="string">&#x27;days&#x27;</span>] = t2.date.apply(<span class="keyword">lambda</span> s:<span class="built_in">len</span>(s.split(<span class="string">&#x27;:&#x27;</span>)))</span><br><span class="line">t2[<span class="string">&#x27;max&#x27;</span>] = t2.date.apply(<span class="keyword">lambda</span> s:<span class="built_in">max</span>([<span class="built_in">int</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> s.split(<span class="string">&#x27;:&#x27;</span>)]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Apply: 对多列应用预定义的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">a, b</span>):</span></span><br><span class="line">	<span class="keyword">if</span>  b == <span class="number">2016</span> <span class="keyword">and</span> a &gt; <span class="number">50</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;flag&#x27;</span>] = df.apply(<span class="keyword">lambda</span> x: function(x.<span class="built_in">id</span>, x.year), axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<h2 id="数值变量"><a href="#数值变量" class="headerlink" title="数值变量"></a>数值变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列值取负数</span></span><br><span class="line">data[<span class="string">&#x27;goods&#x27;</span>] = data[<span class="string">&#x27;goods&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: -x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据列值生成新列</span></span><br><span class="line">data[<span class="string">&quot;flag&quot;</span>]= data.amount.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求所有列的和</span></span><br><span class="line">data[<span class="string">&quot;total&quot;</span>] = data.apply(<span class="keyword">lambda</span> x: <span class="built_in">sum</span>(x), axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求多列的和</span></span><br><span class="line">data[<span class="string">&#x27;total&#x27;</span>] = data[<span class="string">&#x27;Jan&#x27;</span>] + data[<span class="string">&#x27;Feb&#x27;</span>] + data[<span class="string">&#x27;Mar&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回多列的最大值</span></span><br><span class="line">data[<span class="string">&#x27;max&#x27;</span>] = data[[<span class="string">&#x27;a1&#x27;</span>,<span class="string">&#x27;a2&#x27;</span>,<span class="string">&#x27;a3&#x27;</span>]].apply(<span class="keyword">lambda</span> x: <span class="built_in">max</span>(x), axis =<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求两列的乘积</span></span><br><span class="line">data[<span class="string">&quot;all&quot;</span>]=data[[<span class="string">&quot;price&quot;</span>,<span class="string">&quot;AREA&quot;</span>]].apply(<span class="keyword">lambda</span> x:x[<span class="number">0</span>]*x[<span class="number">1</span>], axis = <span class="number">1</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回排序值</span></span><br><span class="line">data[<span class="string">&#x27;num&#x27;</span>]=data[<span class="string">&#x27;score&#x27;</span>].rank(ascending=<span class="number">0</span>,method=<span class="string">&#x27;dense&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化：小数转换为百分数</span></span><br><span class="line">df[<span class="string">&#x27;ratio&#x27;</span>] = df[<span class="string">&#x27;ratio&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="built_in">format</span>(x, <span class="string">&#x27;.2%&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#求上下两行的差值</span></span><br><span class="line">df[<span class="string">&#x27;n_1&#x27;</span>] = df[<span class="string">&#x27;n&#x27;</span>].shift(<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&#x27;n_diff&#x27;</span>] = df[<span class="string">&#x27;n&#x27;</span>] - df[<span class="string">&#x27;n_1&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="日期变量"><a href="#日期变量" class="headerlink" title="日期变量"></a>日期变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#时间加减</span></span><br><span class="line">df[<span class="string">&#x27;time&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>] + pd.Timedelta(days=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&#x27;time&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>] - pd.Timedelta(<span class="string">&#x27;2 hours 30 minutes&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算日期差</span></span><br><span class="line">df[<span class="string">&#x27;timediff&#x27;</span>] = (df[<span class="string">&#x27;t1&#x27;</span>] - df[<span class="string">&#x27;t2&#x27;</span>]) / timedelta (days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取日期中的年</span></span><br><span class="line">df[<span class="string">&#x27;year&#x27;</span>] = df[<span class="string">&#x27;date&#x27;</span>].dt.year</span><br></pre></td></tr></table></figure>
<h1 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用0填补缺失值</span></span><br><span class="line">data[[<span class="string">&#x27;amount&#x27;</span>,<span class="string">&#x27;goods&#x27;</span>]] = data[[<span class="string">&#x27;amount&#x27;</span>,<span class="string">&#x27;goods&#x27;</span>]].fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用0填补缺失值</span></span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>].replace(np.nan, <span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#平均值填补缺失值</span></span><br><span class="line">vmean = data[<span class="string">&#x27;Age&#x27;</span>].mean(axis=<span class="number">0</span>, skipna=<span class="literal">True</span>)</span><br><span class="line">data[<span class="string">&#x27;Age_empflag&#x27;</span>] = data[<span class="string">&#x27;Age&#x27;</span>].isnull()</span><br><span class="line">data[<span class="string">&#x27;Age&#x27;</span>]= data[<span class="string">&#x27;Age&#x27;</span>].fillna(vmean)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h1><h2 id="横向连接"><a href="#横向连接" class="headerlink" title="横向连接"></a>横向连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3 = pd.merge(t1,t2, on = <span class="string">&#x27;id&#x27;</span>, how = <span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t3 = pd.merge(t1,t2 left_on = <span class="string">&#x27;id&#x27;</span>, right_on = <span class="string">&#x27;user_id&#x27;</span>, how = <span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t3 = pd.merge(t1,t2,on=[<span class="string">&#x27;user_id&#x27;</span>,<span class="string">&#x27;date&#x27;</span>],how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t3 = pd.merge(t1[[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;date&#x27;</span>]],</span><br><span class="line">                t2[[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;amount&#x27;</span>,<span class="string">&#x27;type&#x27;</span>]],</span><br><span class="line">                on = <span class="string">&#x27;id&#x27;</span>, how=<span class="string">&#x27;outer&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="纵向连接"><a href="#纵向连接" class="headerlink" title="纵向连接"></a>纵向连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df1.append(df2)</span><br><span class="line"></span><br><span class="line">df = pd.concat([df1, df2], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h1 id="数据分组和计算Groupby"><a href="#数据分组和计算Groupby" class="headerlink" title="数据分组和计算Groupby"></a>数据分组和计算Groupby</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分组统计</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).describe()</span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).mean()</span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).size()   <span class="comment">#每组的记录数</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).ngroups   <span class="comment">#组数</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>)[<span class="string">&#x27;id&#x27;</span>].nunique().to_frame()</span><br><span class="line">df.groupby(<span class="string">&#x27;Year&#x27;</span>).get_group(<span class="number">2021</span>)    <span class="comment"># 选择一个分组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重设索引</span></span><br><span class="line">d1 = df.groupby([<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;id&#x27;</span>]).count()</span><br><span class="line">d1 = d1.reset_index(drop=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分组后排序</span></span><br><span class="line">df[<span class="string">&#x27;第几单&#x27;</span>] = df.groupby(<span class="string">&#x27;手机号&#x27;</span>)[<span class="string">&#x27;支付时间&#x27;</span>].rank()</span><br><span class="line">df[<span class="string">&#x27;排名&#x27;</span>] = df.groupby([<span class="string">&#x27;月份&#x27;</span>])[<span class="string">&#x27;订单数&#x27;</span>].rank(ascending = <span class="literal">False</span>, method = <span class="string">&#x27;dense&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="聚合计算agg"><a href="#聚合计算agg" class="headerlink" title="聚合计算agg"></a>聚合计算agg</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#聚合结果排序</span></span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>).agg(np.size).sort_values(ascending= <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名聚合结果列</span></span><br><span class="line">df2 = df.groupby(<span class="string">&#x27;id&#x27;</span>)[<span class="string">&#x27;sales&#x27;</span>].agg([(<span class="string">&#x27;avg_sales&#x27;</span>,<span class="string">&#x27;mean&#x27;</span>),     </span><br><span class="line">                                     (<span class="string">&#x27;stdev_sales&#x27;</span>,<span class="string">&#x27;std&#x27;</span>)])  </span><br><span class="line"></span><br><span class="line"><span class="comment">#对列指定多种计算方法</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>)[<span class="string">&#x27;sales&#x27;</span>].agg([np.<span class="built_in">sum</span>, np.mean, np.std])</span><br><span class="line"></span><br><span class="line"><span class="comment">#对列指定多种计算方法</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).agg(&#123;<span class="string">&#x27;sales&#x27;</span>:[<span class="string">&#x27;min&#x27;</span>,<span class="string">&#x27;max&#x27;</span>,<span class="string">&#x27;mean&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对多列指定不同的计算方法</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).agg(&#123;<span class="string">&#x27;sales&#x27;</span>: [<span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>],</span><br><span class="line">                        <span class="string">&#x27;GMV&#x27;</span>: <span class="string">&#x27;sum&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#lambda &amp; 函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_min</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>)[<span class="string">&#x27;sales&#x27;</span>].agg(Mean=<span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line">                                Diff1 = <span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>(),  <span class="comment"># lambda </span></span><br><span class="line">                                 Diff2 = max_min )   <span class="comment">#函数  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义函数：取每个group里的前5条记录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_5</span>(<span class="params">df, c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> df[c].sort_values(ascending = <span class="literal">False</span>).head()</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&#x27;id&#x27;</span>).groupby(<span class="string">&#x27;date&#x27;</span>).apply(first_5, <span class="string">&#x27;sales&#x27;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义函数：取每个group里的第二条记录</span></span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>)[<span class="string">&#x27;date&#x27;</span>].apply(<span class="keyword">lambda</span> i:i.iloc[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(i)&gt;<span class="number">1</span> <span class="keyword">else</span> np.nan)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义函数：连接每个组内的某变量</span></span><br><span class="line">df.groupby([<span class="string">&#x27;id&#x27;</span>])[<span class="string">&#x27;date&#x27;</span>].agg(<span class="keyword">lambda</span> x:<span class="string">&#x27;:&#x27;</span>.join(x))</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;user&#x27;</span>)[<span class="string">&#x27;tag&#x27;</span>].apply(<span class="keyword">lambda</span> x:<span class="string">&#x27;-&#x27;</span>.join(x)).reset_index().to_frame()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#组内上下行相减</span></span><br><span class="line">df[<span class="string">&#x27;shift_1day&#x27;</span>] = df.groupby(<span class="string">&#x27;id&#x27;</span>)[<span class="string">&#x27;date&#x27;</span>].apply(<span class="keyword">lambda</span> i:i.shift(<span class="number">1</span>))</span><br><span class="line">df[<span class="string">&#x27;day_diff&#x27;</span>] = df[<span class="string">&#x27;date&#x27;</span>] - df[<span class="string">&#x27;shift_1day&#x27;</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">#分组后上下行相减：diff()函数默认用下行减上一行</span></span><br><span class="line">df[<span class="string">&#x27;diff_1day&#x27;</span>] = df.groupby(<span class="string">&#x27;id&#x27;</span>)[<span class="string">&#x27;date&#x27;</span>].apply(<span class="keyword">lambda</span> i:i.diff(<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="筛选filter"><a href="#筛选filter" class="headerlink" title="筛选filter"></a>筛选filter</h2><p>筛选满足条件的组，返回原dataframe</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#sales只要有一个大于500的组</span><br><span class="line">df.groupby(&#39;id&#39;).filter(lambda x: (x[&#39;sales&#39;] &gt; 500).any())</span><br><span class="line"></span><br><span class="line">#sales总和大于2000的组</span><br><span class="line">df.groupby(&#39;id&#39;).filter(lambda x:  x[&#39;sales&#39;].sum() &gt; 2000 )</span><br><span class="line"></span><br><span class="line">#3条记录以上的id</span><br><span class="line">df.groupby(&#39;id&#39;).filter(lambda x: len(x) &gt;&#x3D; 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python连接bigquery</title>
    <url>/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/python%E8%BF%9E%E6%8E%A5%E5%88%B0bigquery.html</url>
    <content><![CDATA[<p>最近一直在尝试做商品销售预测，第一步就是把python连接到bigquery，进行数据查询。然而<a href="https://cloud.google.com/bigquery/docs/bigquery-storage-python-pandas?hl=zh-cn">Bigquery官方文档</a>里使用的语句一直卡在了最后一步，最后参考<a href="https://xufeng1024.github.io/2019/12/15/Python-%E8%BF%9E%E6%8E%A5-Google-BigQuery-%E8%BF%9B%E8%A1%8CSQl%E6%9F%A5%E8%AF%A2%E5%B9%B6%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE/">这篇文章</a>成功连接到bigquery并将查询结果转换成dataframe。</p>
<p>首先需要启用BigQuery Storage API，然后创建身份验证，具体步骤参考<a href="https://cloud.google.com/docs/authentication/getting-started?hl=zh-cn">这篇文档</a>，保存好JSON 密钥文件，设置环境变量，然后打开jupyter notebook，开启连接。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas.core.frame <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> bigquery</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建client</span></span><br><span class="line">AUTH_JSON_FILE_PATH = <span class="string">&#x27;JSON密钥文件的地址 格式如/Desktop/bigquery_to_python.json&#x27;</span> </span><br><span class="line">client = bigquery.Client.from_service_account_json(AUTH_JSON_FILE_PATH)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql查询语句</span></span><br><span class="line">SQL = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">SELECT * FROM daily_sales</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query_job = client.query(SQL)  </span><br><span class="line">queryresult = query_job.result()</span><br><span class="line"></span><br><span class="line">resultList = []     </span><br><span class="line">bqListRet = <span class="built_in">list</span>(queryresult)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> listItem <span class="keyword">in</span> bqListRet:</span><br><span class="line">    item = <span class="built_in">list</span>(listItem)</span><br><span class="line">    resultList.append(item)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转换为dataframe, 设置列名</span></span><br><span class="line">df = pd.DataFrame(resultList, columns=[<span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;goods_id&#x27;</span>, <span class="string">&#x27;sales&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>接下去就可以快乐地进行数据分析啦~</p>
]]></content>
      <categories>
        <category>工作记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>bigquery</tag>
      </tags>
  </entry>
</search>
