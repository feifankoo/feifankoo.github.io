<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>It&#39;s Feifan</title>
  
  <subtitle>Your past will make sense in the end.</subtitle>
  <link href="https://feifankoo.github.io/atom.xml" rel="self"/>
  
  <link href="https://feifankoo.github.io/"/>
  <updated>2021-10-13T13:23:22.854Z</updated>
  <id>https://feifankoo.github.io/</id>
  
  <author>
    <name>Feifan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>零基础学java</title>
    <link href="https://feifankoo.github.io/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6java.html"/>
    <id>https://feifankoo.github.io/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6java.html</id>
    <published>2021-09-14T16:00:00.000Z</published>
    <updated>2021-10-13T13:23:22.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-计算"><a href="#1-计算" class="headerlink" title="1 计算"></a>1 计算</h1><p>课程地址： <a href="https://www.icourse163.org/course/ZJU-1001541001?from=searchPage">https://www.icourse163.org/course/ZJU-1001541001?from=searchPage</a></p><p>一定要先装JRE后装Eclipse。</p><p>Eclipse下载地址: <a href="https://www.eclipse.org/downloads/">https://www.eclipse.org/downloads/</a></p><p>JRE下载地址：<a href="https://java.oracle.com/">https://java.oracle.com/</a></p><p>![image-20210920115320897](/Users/feifan/Library/Application Support/typora-user-images/image-20210920115320897.png)</p><h2 id="1-0-快捷键"><a href="#1-0-快捷键" class="headerlink" title="1.0 快捷键"></a>1.0 快捷键</h2><p><code>command + S</code>  保存文件</p><p><code>option + /  </code>   补全代码</p><p><code>command + /</code>  注释行</p><p><code>//</code>  单行注释</p><p><code>/* */ </code>  多行注释</p><h2 id="1-1变量与计算"><a href="#1-1变量与计算" class="headerlink" title="1.1变量与计算"></a>1.1变量与计算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);   <span class="comment">//读取用户的输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;echo:&quot;</span>+ in.nextline());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> amount = <span class="number">100</span>; <span class="comment">//定义一个常量</span></span><br><span class="line"><span class="keyword">int</span> price;   <span class="comment">//定义一个变量</span></span><br><span class="line">price = in.nextInt();    <span class="comment">//变量赋值</span></span><br><span class="line">System.out.println(amount+<span class="string">&quot;-&quot;</span>+price+<span class="string">&quot;=&quot;</span>+(amount-price));</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>JAVA是一种强类型语言，所有变量在使用前必须定义或声明，且必须有确定的数据类型。</p></li><li><p>两个整数的运算的结果只能是整数，10/3 = 3 。</p></li><li><p>当浮点数和整数放在一起运算时，Java会把整数转换成浮点数，然后进行浮点数的运算。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> a = <span class="number">7</span>; </span><br><span class="line">  System.out.println(a);    <span class="comment">//输出7.0</span></span><br><span class="line">System.out.println((<span class="keyword">int</span>)(a/<span class="number">3</span>));    <span class="comment">//类型转换，输出2</span></span><br></pre></td></tr></table></figure><h1 id="2-判断"><a href="#2-判断" class="headerlink" title="2 判断"></a>2 判断</h1><h2 id="2-0-关系运算"><a href="#2-0-关系运算" class="headerlink" title="2.0 关系运算"></a>2.0 关系运算</h2><p>Java提供了六个关系运算符：</p><ul><li>==    相等</li><li>!=    不相等</li><li>&gt;    大于</li><li>&gt;=    大于或等于</li><li>&lt;    小于</li><li>&lt;=    小于或等于</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">0.1</span>+<span class="number">0.1</span>; </span><br><span class="line">System.out.println( Math.abs(a-b) &lt; <span class="number">1e-6</span>);  <span class="comment">//判断两个浮点数是否相同</span></span><br></pre></td></tr></table></figure><h2 id="2-1-IF-ELSE"><a href="#2-1-IF-ELSE" class="headerlink" title="2.1 IF-ELSE"></a>2.1 IF-ELSE</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 条件<span class="number">1</span> )</span><br><span class="line">&#123; &lt; 执行语句<span class="number">1</span> &gt;;  &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>  ( 条件<span class="number">2</span> )</span><br><span class="line">&#123; &lt; 执行语句<span class="number">2</span> &gt;;  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; &lt; 执行语句<span class="number">3</span> &gt;;  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-switch-case"><a href="#2-1-switch-case" class="headerlink" title="2.1 switch-case"></a>2.1 switch-case</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (控制表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> 常量:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch语句可以看做是一种基于计算的跳转，计算完控制表达式的值之后，程序会跳转到相匹配的case，在执行完分支中的最后一条语句后，如果后面没有break，就会<em><strong>顺序执行下面的case，直到遇到一个break</strong></em>，或者switch结束为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num = in.nextInt();</span><br><span class="line"><span class="keyword">switch</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println( <span class="string">&quot;hello&quot;</span> );</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println( <span class="string">&quot;bye&quot;</span> );</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.println( <span class="string">&quot;thanks&quot;</span> );</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println( <span class="string">&quot;what?&quot;</span> );</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序:：输入2，输出hello；输入一个3，输出bye thanks what?；输入10，输出what？</p><h1 id="3-循环"><a href="#3-循环" class="headerlink" title="3 循环"></a>3 循环</h1><h2 id="3-1-while和do-while语法"><a href="#3-1-while和do-while语法" class="headerlink" title="3.1 while和do-while语法"></a>3.1 while和do-while语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//while循环</span></span><br><span class="line"><span class="keyword">while</span> ( 条件 )</span><br><span class="line">&#123;</span><br><span class="line">      &lt;循环语句<span class="number">1</span>&gt;;</span><br><span class="line">      &lt;循环语句<span class="number">2</span>&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//do-while循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">      &lt;循环语句<span class="number">1</span>&gt;;</span><br><span class="line">      &lt;循环语句<span class="number">2</span>&gt;;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure><h2 id="3-2-例子"><a href="#3-2-例子" class="headerlink" title="3.2 例子"></a>3.2 例子</h2><p>Math.random()得到一个[0,1)范围内的随机数。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算整数的位数-v1</span></span><br><span class="line"><span class="comment">// 输入为0的时候输出不对</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> number = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( number &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">number = number/<span class="number">10</span>;</span><br><span class="line">count = count + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;这是一个&quot;</span>+ count+ <span class="string">&quot;位数&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算整数的位数-v2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> number = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">number = number/<span class="number">10</span>;</span><br><span class="line">count = count + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> ( number &gt; <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;这是一个&quot;</span>+ count+ <span class="string">&quot;位数&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-循环控制"><a href="#4-循环控制" class="headerlink" title="4 循环控制"></a>4 循环控制</h1><h2 id="4-1-for循环"><a href="#4-1-for循环" class="headerlink" title="4.1 for循环"></a>4.1 for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">for</span>( 初始化; 先验条件; 单步动作) </span><br><span class="line">&#123; &lt;循环语句&gt; ; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> count = <span class="number">10</span>; count &gt; <span class="number">0</span> ; count = count -<span class="number">1</span>)</span><br><span class="line">&#123; System.out.println(count);  &#125;</span><br></pre></td></tr></table></figure><p>执行顺序：初始值count为10，判断count&gt;0是否成立，成立时，完成循环体内的语句，然后count-1，再判断count&gt;0是否成立……以此类推。</p><h2 id="4-2-循环控制"><a href="#4-2-循环控制" class="headerlink" title="4.2 循环控制"></a>4.2 循环控制</h2><p>**break: ** 跳出当前这层循环</p><p>**continue: **跳出循环这一轮剩余的语句，进入下一轮</p><p>循环前可以放一个标号（label）来标示这个循环，带标号的break的continue可以对那个循环起作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Outer:</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&gt;<span class="number">5</span>; j++)</span><br><span class="line"><span class="keyword">if</span> (i+j == <span class="number">3</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span> Outer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-复合赋值"><a href="#4-3-复合赋值" class="headerlink" title="4.3 复合赋值"></a>4.3 复合赋值</h2><p><code>a = a + 6</code>  等同于   <code>a +=  6</code>  </p><p><code>a = a * ( b+ 6)</code> 等同于 <code>a *= b + 6 </code></p><p><code>i = i +1</code>  等同于 <code>i++</code></p><h2 id="4-4-逻辑运算"><a href="#4-4-逻辑运算" class="headerlink" title="4.4 逻辑运算"></a>4.4 逻辑运算</h2><p>逻辑与： <code>&amp;&amp;</code></p><p>逻辑或：<code>||</code></p><p>逻辑非：<code>!</code></p><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h1><h2 id="5-1-基本语法"><a href="#5-1-基本语法" class="headerlink" title="5.1 基本语法"></a>5.1 基本语法</h2><p>数组是一种容器，它的特点是:</p><ol><li>所有的元素具有相同的数据类型。</li><li>一旦创建，不能改变大小。</li><li>元素的索引从0开始。</li></ol><p>定义数组：  <code>&lt;类型&gt;[] &lt;数组名字&gt; = new &lt;类型&gt;[元素个数] </code>。</p><p>元素个数可以是变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组变量，用这种方法创建的数组元素初始值为0</span></span><br><span class="line"><span class="keyword">int</span>[] score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个数组</span></span><br><span class="line">  <span class="keyword">int</span>[] scores = &#123;<span class="number">87</span>,<span class="number">99</span>,<span class="number">67</span>,<span class="number">83</span>,<span class="number">42</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中元素个数</span></span><br><span class="line"><span class="keyword">int</span> num = score.length </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] data = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的遍历,k代表数组变量data中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> k: data)   </span><br><span class="line">&#123; </span><br><span class="line">    System.out.print(k); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-二维数组"><a href="#5-2-二维数组" class="headerlink" title="5.2 二维数组"></a>5.2 二维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] a  = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] b  = &#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="6-使用对象"><a href="#6-使用对象" class="headerlink" title="6 使用对象"></a>6 使用对象</h1><h2 id="6-1-字符类型"><a href="#6-1-字符类型" class="headerlink" title="6.1 字符类型"></a>6.1 字符类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;我&#x27;</span>;    <span class="comment">//单个字符变量，用单引号表示</span></span><br><span class="line">System.out.println( (<span class="keyword">int</span>)c );   <span class="comment">//char和int类型可以互相转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println( (<span class="keyword">char</span>)(c1 + <span class="string">&#x27;b&#x27;</span> - <span class="string">&#x27;B&#x27;</span> ) );   <span class="comment">//大小写转换</span></span><br></pre></td></tr></table></figure><p><strong>逃逸字符</strong></p><table><thead><tr><th align="left">字符</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">\t</td><td align="left">到下一个表格位</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\b</td><td align="left">回退一格</td></tr><tr><td align="left">\“</td><td align="left">双引号</td></tr><tr><td align="left">\‘</td><td align="left">单引号</td></tr><tr><td align="left">\\</td><td align="left">反斜杠本身</td></tr></tbody></table><h2 id="6-2-字符串操作"><a href="#6-2-字符串操作" class="headerlink" title="6.2 字符串操作"></a>6.2 字符串操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1  = <span class="string">&quot;bye&quot;</span> ;   </span><br><span class="line">String s2  =  <span class="string">&quot;bye&quot;</span> ;   </span><br><span class="line">System.out.println( s1.equals(s2) );   <span class="comment">//判断两个字符串内容是否相同</span></span><br><span class="line">System.out.println( s1 == s2   );     <span class="comment">//判断两个字符串是否是同一个</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s1.length();     <span class="comment">//字符串长度</span></span><br><span class="line">s1.charAt(<span class="number">0</span>);    <span class="comment">//访问字符串里的字符</span></span><br><span class="line">s1.substring(<span class="number">1</span>);   <span class="comment">//提取子串</span></span><br><span class="line">s1.substring(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//提取子串(前闭后开)</span></span><br><span class="line">s1.indexOf(<span class="string">&#x27;1&#x27;</span>) ;  <span class="comment">//返回某字符所在的位置，-1表示不存在</span></span><br><span class="line">s1.trim();      <span class="comment">//删除字符串两端的空格</span></span><br><span class="line"></span><br><span class="line">s1.replace(c1, c2); <span class="comment">//替换字符串中的子串</span></span><br><span class="line">s1.startsWith(<span class="string">&quot;ab&quot;</span>); <span class="comment">//判断字符串的开头</span></span><br><span class="line"></span><br><span class="line">  String s2 = s1.toLowerCase();    <span class="comment">//字符串小写转换</span></span><br><span class="line">  String s2 = s1.toUpperCase()();  <span class="comment">//字符串大写转换</span></span><br></pre></td></tr></table></figure><h1 id="7-函数"><a href="#7-函数" class="headerlink" title="7 函数"></a>7 函数</h1><p>Java语言在调用函数的时候，永远只能传值给函数，而不是变量本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个sum函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = a + b;</span><br><span class="line">System.out.println( sum );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-1-本地变量"><a href="#7-1-本地变量" class="headerlink" title="7.1 本地变量"></a>7.1 本地变量</h2><ul><li><p>本地变量是定义在块内的：1、函数的块内；2、语句的块内</p></li><li><p>程序在进入这个块之前，其中的变量不存在；离开这个块，其中的变量就消失了。</p></li><li><p>块外面定义的变量在块里面仍然有效。</p></li></ul><h1 id="8-实用手册"><a href="#8-实用手册" class="headerlink" title="8 实用手册"></a>8 实用手册</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> String s1  = in.next();    <span class="comment">//读取一个单词</span></span><br><span class="line"> String s2  = in.nextLine();    <span class="comment">//读取一整行</span></span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;Abc&quot;</span>;  <span class="comment">// 创建一个字符串str</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;  <span class="comment">// 创建布尔类型的变量 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> i = Math.sqrt(n);     <span class="comment">//计算平方根</span></span><br><span class="line"><span class="keyword">double</span> i = Math.random();    <span class="comment">//返回一个随机数</span></span><br><span class="line"><span class="keyword">double</span> i = Math.pow(<span class="number">2</span>,<span class="number">4</span>) ;   <span class="comment">//计算幂</span></span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">&quot;%.2f&quot;</span>, sum); <span class="comment">//输出结果保留两位小数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">浙江大学翁恺老师的MOOC课程⭐️⭐️⭐️⭐️⭐️</summary>
    
    
    
    <category term="学习笔记" scheme="https://feifankoo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="java" scheme="https://feifankoo.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>python连接bigquery, mysql</title>
    <link href="https://feifankoo.github.io/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/python%E8%BF%9E%E6%8E%A5%E5%88%B0bigquery.html"/>
    <id>https://feifankoo.github.io/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/python%E8%BF%9E%E6%8E%A5%E5%88%B0bigquery.html</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2021-10-13T13:13:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="连接bigquery"><a href="#连接bigquery" class="headerlink" title="连接bigquery"></a>连接bigquery</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>最近一直在尝试做商品销售预测，第一步就是把python连接到bigquery，进行数据查询。然而<a href="https://cloud.google.com/bigquery/docs/bigquery-storage-python-pandas?hl=zh-cn">Bigquery官方文档</a>里使用的语句一直卡在了最后一步，最后参考<a href="https://xufeng1024.github.io/2019/12/15/Python-%E8%BF%9E%E6%8E%A5-Google-BigQuery-%E8%BF%9B%E8%A1%8CSQl%E6%9F%A5%E8%AF%A2%E5%B9%B6%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE/">这篇文章</a>成功连接到bigquery并将查询结果转换成dataframe。</p><p>首先需要启用BigQuery Storage API，然后创建身份验证，具体步骤参考<a href="https://cloud.google.com/docs/authentication/getting-started?hl=zh-cn">这篇文档</a>，保存好JSON 密钥文件，设置环境变量，然后打开jupyter notebook，开启连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas.core.frame <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> bigquery</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建client</span></span><br><span class="line">AUTH_JSON_FILE_PATH = <span class="string">&#x27;/Desktop/bigquery_to_python.json&#x27;</span>  <span class="comment">#JSON密钥文件的地址 </span></span><br><span class="line">client = bigquery.Client.from_service_account_json(AUTH_JSON_FILE_PATH)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sql查询语句</span></span><br><span class="line">SQL = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">SELECT * FROM daily_sales</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">query_job = client.query(SQL)  </span><br><span class="line">queryresult = query_job.result()</span><br><span class="line"></span><br><span class="line">resultList = []     </span><br><span class="line">bqListRet = <span class="built_in">list</span>(queryresult)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> listItem <span class="keyword">in</span> bqListRet:</span><br><span class="line">    item = <span class="built_in">list</span>(listItem)</span><br><span class="line">    resultList.append(item)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转换为dataframe, 设置列名</span></span><br><span class="line">df = pd.DataFrame(resultList, columns=[<span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;goods_id&#x27;</span>, <span class="string">&#x27;sales&#x27;</span>])</span><br></pre></td></tr></table></figure><p>接下去就可以快乐地进行数据分析啦~</p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>换了台电脑，成功用官方文档里的方法连上了​~​怀疑之前报错是因为安装的依赖包版本不对:sob:</p><p>所以方法二（官方文档里的方法）如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas.core.frame <span class="keyword">import</span> DataFrame</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> google.auth</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> bigquery</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> bigquery_storage</span><br><span class="line"></span><br><span class="line">AUTH_JSON_FILE_PATH = <span class="string">&#x27;/Desktop/bigquery_to_python.json&#x27;</span>  <span class="comment">#JSON密钥文件的地址 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建client</span></span><br><span class="line">bqclient = bigquery.Client.from_service_account_json(AUTH_JSON_FILE_PATH)</span><br><span class="line">bqstorageclient = bigquery_storage.BigQueryReadClient.from_service_account_json(AUTH_JSON_FILE_PATH)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sql查询语句</span></span><br><span class="line">SQL = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">SELECT * FROM daily_sales</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = (</span><br><span class="line">    bqclient.query(SQL)</span><br><span class="line">    .result()</span><br><span class="line">    .to_dataframe(bqstorage_client = bqstorageclient)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;用户名&#x27;</span>, <span class="string">&#x27;密码&#x27;</span>, <span class="string">&#x27;ip地址&#x27;</span>, <span class="string">&#x27;端口&#x27;</span>, <span class="string">&#x27;数据库&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sql查询语句</span></span><br><span class="line">SQL = <span class="string">&quot;&quot;&quot; SELECT * FROM daily_sales&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sales = pd.read_sql_query(SQL, engine)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;连接bigquery&quot;&gt;&lt;a href=&quot;#连接bigquery&quot; class=&quot;headerlink&quot; title=&quot;连接bigquery&quot;&gt;&lt;/a&gt;连接bigquery&lt;/h1&gt;&lt;h2 id=&quot;方法1&quot;&gt;&lt;a href=&quot;#方法1&quot; class=&quot;header</summary>
      
    
    
    
    <category term="工作记录" scheme="https://feifankoo.github.io/categories/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="python" scheme="https://feifankoo.github.io/tags/python/"/>
    
    <category term="bigquery" scheme="https://feifankoo.github.io/tags/bigquery/"/>
    
    <category term="mysql" scheme="https://feifankoo.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python笔记本_数据探索与清洗</title>
    <link href="https://feifankoo.github.io/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python_%E6%95%B0%E6%8D%AE%E6%8E%A2%E7%B4%A2%E4%B8%8E%E6%B8%85%E6%B4%97.html"/>
    <id>https://feifankoo.github.io/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python_%E6%95%B0%E6%8D%AE%E6%8E%A2%E7%B4%A2%E4%B8%8E%E6%B8%85%E6%B4%97.html</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2021-10-13T13:13:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始数据分析或建模之前，需要对数据进行初步的探索以及简单的清洗和处理。本篇整理了常用的pandas语句。其中包括：</p><ul><li>导包/设置</li><li>导入、导出文件</li><li>查看数据的基础信息</li><li>行列的增删查改</li><li>行列筛选</li><li>变量处理<ul><li>分类变量</li><li>数值变量</li><li>日期变量</li></ul></li><li>缺失值处理</li><li>表连接</li><li>数据分组和计算Groupby</li></ul><h1 id="导包-设置"><a href="#导包-设置" class="headerlink" title="导包/设置"></a>导包/设置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment">#忽略warnings</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#改变当前工作目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">r&quot;C:\Users\Desktop\Python&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示数据中所有的列</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h1 id="导入-导出文件"><a href="#导入-导出文件" class="headerlink" title="导入/导出文件"></a>导入/导出文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入excel文件，指定列的变量类型</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;order.xlsx&#x27;</span>, dtype = &#123;<span class="string">&#x27;order_no&#x27;</span> : <span class="built_in">str</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入excel文件，指定工作表和标题行</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;sales.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;sheet1&#x27;</span>, header=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#导出到excel文件</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;date.xlsx&#x27;</span>, index=<span class="literal">False</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存到csv文件</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;data.csv&#x27;</span>,index=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h1 id="初步认识数据"><a href="#初步认识数据" class="headerlink" title="初步认识数据"></a>初步认识数据</h1><h2 id="整体数据"><a href="#整体数据" class="headerlink" title="整体数据"></a>整体数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看数据集基本信息</span></span><br><span class="line">data.info(verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查是否有缺失值</span></span><br><span class="line">data.isnull().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数值变量的统计信息</span></span><br><span class="line">data.describe().T</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的行数和列数</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Num of rows: &quot;</span> + <span class="built_in">str</span>(data.shape[<span class="number">0</span>])) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Num of columns: &quot;</span> + <span class="built_in">str</span>(data.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="单变量"><a href="#单变量" class="headerlink" title="单变量"></a>单变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看变量unique值的个数</span></span><br><span class="line">print(<span class="string">&quot;用户数为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>( <span class="built_in">len</span>(<span class="built_in">set</span>(data[<span class="string">&#x27;user_id&#x27;</span>])) ))</span><br><span class="line">print(<span class="string">&quot;订单数为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>( <span class="built_in">len</span>(<span class="built_in">set</span>(data[<span class="string">&#x27;order_no&#x27;</span>])) ))</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个变量的全部取值</span></span><br><span class="line"><span class="built_in">set</span>(data[<span class="string">&#x27;user&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出某个变量的全部取值</span></span><br><span class="line">data[<span class="string">&#x27;user&#x27;</span>].unique()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个变量的取值及相应的数量</span></span><br><span class="line">data[<span class="string">&#x27;user&#x27;</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个变量的非缺失值和缺失值数量分布</span></span><br><span class="line">data[<span class="string">&#x27;type&#x27;</span>].isnull().value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算某个变量的百分位数</span></span><br><span class="line">df[<span class="string">&#x27;物流时间&#x27;</span>].quantile(<span class="number">0.8</span>) </span><br></pre></td></tr></table></figure><h2 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">df.sort_values(by=<span class="string">&#x27;date&#x27;</span>,ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h1 id="列操作-增删查改"><a href="#列操作-增删查改" class="headerlink" title="列操作-增删查改"></a>列操作-增删查改</h1><h2 id="删除指定列"><a href="#删除指定列" class="headerlink" title="删除指定列"></a>删除指定列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">to_drop = [<span class="string">&#x27;code&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">data2 = data.drop(to_drop, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">data.drop(columns=[<span class="string">&#x27;code&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>],inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="重命名列"><a href="#重命名列" class="headerlink" title="重命名列"></a>重命名列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">data.columns = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;amount&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">data.rename(columns=&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;user_type&quot;</span>,<span class="string">&quot;n&quot;</span>:<span class="string">&quot;count&quot;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="筛选数据"><a href="#筛选数据" class="headerlink" title="筛选数据"></a>筛选数据</h1><h2 id="重复项"><a href="#重复项" class="headerlink" title="重复项"></a>重复项</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除重复项并保留第一个记录</span></span><br><span class="line">df2 = df.drop_duplicates(subset=[<span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;user&#x27;</span>], keep=<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除重复项</span></span><br><span class="line">df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选重复行</span></span><br><span class="line">df[df.duplicated([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;score&#x27;</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重复行</span></span><br><span class="line">print(<span class="string">&quot;重复值共有:&#123;&#125;行&quot;</span>.<span class="built_in">format</span>(df.duplicated().<span class="built_in">sum</span>()))</span><br></pre></td></tr></table></figure><h2 id="筛选行"><a href="#筛选行" class="headerlink" title="筛选行"></a>筛选行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据变量的值筛选行</span></span><br><span class="line">df[df.<span class="built_in">type</span> == <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">df[df.status != <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df[df[<span class="string">&#x27;type&#x27;</span>].isin([<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;K&#x27;</span>])]</span><br><span class="line"></span><br><span class="line">sample[sample[<span class="string">&#x27;score&#x27;</span>].between(<span class="number">70</span>,<span class="number">80</span>,inclusive=<span class="literal">True</span>)]</span><br><span class="line"></span><br><span class="line">df[(df.date &gt;= <span class="number">20200501</span> ) &amp; (df.amount &gt;= <span class="number">3000</span>)]</span><br><span class="line"></span><br><span class="line">df.query(<span class="string">&#x27;score &gt; 90&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选变量name以M开头的行</span></span><br><span class="line">df[df[<span class="string">&#x27;name&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&#x27;[M]+&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据取数窗口筛选行</span></span><br><span class="line">df2 = df[df.dayA &gt; df.dayB][df.dayA &lt; df.dayB + datetime.timedelta(days=<span class="number">365</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#loc</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;type&#x27;</span>].isna()==<span class="literal">True</span> &amp; df[<span class="string">&#x27;name&#x27;</span>].notnull()]</span><br><span class="line"></span><br><span class="line">df.loc[df[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;B&quot;</span>]</span><br><span class="line">df.loc[lc[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;B&quot;</span>, [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;amount&quot;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据位置筛选行：选取0-199行</span></span><br><span class="line">data.loc[<span class="number">0</span>:<span class="number">200</span>,:]</span><br></pre></td></tr></table></figure><h2 id="筛选列"><a href="#筛选列" class="headerlink" title="筛选列"></a>筛选列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过列名选取列</span></span><br><span class="line">df2 = df[[<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;user&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过列的位置选取列</span></span><br><span class="line">x = data[columns[:-<span class="number">1</span>]]</span><br><span class="line">y = data[columns[-<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><h1 id="变量处理"><a href="#变量处理" class="headerlink" title="变量处理"></a>变量处理</h1><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日期转换成整数变量</span></span><br><span class="line">df[<span class="string">&#x27;order_date&#x27;</span>,<span class="string">&#x27;ship_date&#x27;</span>].astype(<span class="string">&#x27;int&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分类变量转换成数值变量</span></span><br><span class="line">data[<span class="string">&#x27;Total&#x27;</span>] = pd.to_numeric(data[<span class="string">&#x27;Total&#x27;</span>], errors = <span class="string">&#x27;coerce&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据格式化：字符串$1,100 变成 数值 1100</span></span><br><span class="line">data[<span class="string">&#x27;amount2&#x27;</span>] = data[<span class="string">&#x27;amount&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(x[<span class="number">1</span>:].split(<span class="string">&#x27;,&#x27;</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;2021-05-01&#x27;格式转换为日期变量</span></span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;date&#x27;</span>], <span class="built_in">format</span>=<span class="string">&quot;Y%-m%-d%&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="分类变量"><a href="#分类变量" class="headerlink" title="分类变量"></a>分类变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变量字符串大写</span></span><br><span class="line">data[<span class="string">&#x27;type&#x27;</span>] = data[<span class="string">&#x27;type&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">str</span>(x).upper())</span><br><span class="line"></span><br><span class="line"><span class="comment">#首字母大写/ 大小写</span></span><br><span class="line">data[<span class="string">&#x27;origin&#x27;</span>].<span class="built_in">str</span>.capitalize()    </span><br><span class="line">data[<span class="string">&#x27;origin&#x27;</span>].<span class="built_in">str</span>.upper()        </span><br><span class="line">data[<span class="string">&#x27;origin&#x27;</span>].<span class="built_in">str</span>.lower()   </span><br><span class="line"></span><br><span class="line"><span class="comment">#变量值替换</span></span><br><span class="line">data[<span class="string">&#x27;country&#x27;</span>].replace(<span class="string">&quot;america&quot;</span>,<span class="string">&quot;US&quot;</span>,inplace=<span class="literal">True</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除变量前后的空格</span></span><br><span class="line">df[<span class="string">&#x27;type&#x27;</span>] = df[<span class="string">&#x27;type&#x27;</span>].apply(<span class="keyword">lambda</span> s : <span class="built_in">str</span>(s).strip())</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换成数值类型</span></span><br><span class="line">data[<span class="string">&#x27;income&#x27;</span>] = pd.to_numeric(data[<span class="string">&#x27;income&#x27;</span>], errors = <span class="string">&#x27;coerce&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#变量取值一一映射成生成新列</span></span><br><span class="line">new = &#123;<span class="string">&#x27;B&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;D&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">data[<span class="string">&#x27;type&#x27;</span>] = data.<span class="built_in">type</span>.<span class="built_in">map</span>(new)</span><br><span class="line"></span><br><span class="line"><span class="comment">#变量取值一一映射成数值</span></span><br><span class="line">data[<span class="string">&#x27;gender&#x27;</span>].replace([<span class="string">&#x27;Male&#x27;</span>,<span class="string">&#x27;Female&#x27;</span>],[<span class="number">0</span>,<span class="number">1</span>],inplace=<span class="literal">True</span>)</span><br><span class="line">data[<span class="string">&#x27;online&#x27;</span>].replace([<span class="string">&#x27;No&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>,<span class="string">&#x27;Not yet&#x27;</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据列值生成新的数值变量</span></span><br><span class="line">df.loc[df[<span class="string">&quot;income&quot;</span>] == <span class="string">&#x27;&gt;50K&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>] = <span class="number">1</span></span><br><span class="line">df.loc[df[<span class="string">&quot;income&quot;</span>] != <span class="string">&#x27;&gt;50K&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取字符串中的特定部分:&#x27;2021-05-01&#x27;</span></span><br><span class="line">data[<span class="string">&#x27;year&#x27;</span>] = data.Date.apply(<span class="keyword">lambda</span> x: x.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">data[<span class="string">&#x27;month&#x27;</span>] = data.Date.apply(<span class="keyword">lambda</span> x: x.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">data[<span class="string">&#x27;day&#x27;</span>] = data.Date.apply(<span class="keyword">lambda</span> x: x.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取字符串中的特定部分:&#x27;129852, pink slip dress&#x27;</span></span><br><span class="line">df[<span class="string">&#x27;id&#x27;</span>] = df[<span class="string">&#x27;product&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Apply: 对列应用函数</span></span><br><span class="line">t2[<span class="string">&#x27;days&#x27;</span>] = t2.date.apply(<span class="keyword">lambda</span> s:<span class="built_in">len</span>(s.split(<span class="string">&#x27;:&#x27;</span>)))</span><br><span class="line">t2[<span class="string">&#x27;max&#x27;</span>] = t2.date.apply(<span class="keyword">lambda</span> s:<span class="built_in">max</span>([<span class="built_in">int</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> s.split(<span class="string">&#x27;:&#x27;</span>)]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Apply: 对多列应用预定义的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">a, b</span>):</span></span><br><span class="line"><span class="keyword">if</span>  b == <span class="number">2016</span> <span class="keyword">and</span> a &gt; <span class="number">50</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;flag&#x27;</span>] = df.apply(<span class="keyword">lambda</span> x: function(x.<span class="built_in">id</span>, x.year), axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="数值变量"><a href="#数值变量" class="headerlink" title="数值变量"></a>数值变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列值取负数</span></span><br><span class="line">data[<span class="string">&#x27;goods&#x27;</span>] = data[<span class="string">&#x27;goods&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: -x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据列值生成新列</span></span><br><span class="line">data[<span class="string">&quot;flag&quot;</span>]= data.amount.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求所有列的和</span></span><br><span class="line">data[<span class="string">&quot;total&quot;</span>] = data.apply(<span class="keyword">lambda</span> x: <span class="built_in">sum</span>(x), axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求多列的和</span></span><br><span class="line">data[<span class="string">&#x27;total&#x27;</span>] = data[<span class="string">&#x27;Jan&#x27;</span>] + data[<span class="string">&#x27;Feb&#x27;</span>] + data[<span class="string">&#x27;Mar&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回多列的最大值</span></span><br><span class="line">data[<span class="string">&#x27;max&#x27;</span>] = data[[<span class="string">&#x27;a1&#x27;</span>,<span class="string">&#x27;a2&#x27;</span>,<span class="string">&#x27;a3&#x27;</span>]].apply(<span class="keyword">lambda</span> x: <span class="built_in">max</span>(x), axis =<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求两列的乘积</span></span><br><span class="line">data[<span class="string">&quot;all&quot;</span>] = data[[<span class="string">&quot;price&quot;</span>,<span class="string">&quot;AREA&quot;</span>]].apply(<span class="keyword">lambda</span> x:x[<span class="number">0</span>]*x[<span class="number">1</span>], axis = <span class="number">1</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回排序值</span></span><br><span class="line">data[<span class="string">&#x27;num&#x27;</span>] = data[<span class="string">&#x27;score&#x27;</span>].rank(ascending=<span class="number">0</span>,method=<span class="string">&#x27;dense&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化：小数转换为百分数</span></span><br><span class="line">df[<span class="string">&#x27;ratio&#x27;</span>] = df[<span class="string">&#x27;ratio&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="built_in">format</span>(x, <span class="string">&#x27;.2%&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#求上下两行的差值</span></span><br><span class="line">df[<span class="string">&#x27;n_1&#x27;</span>] = df[<span class="string">&#x27;n&#x27;</span>].shift(<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&#x27;n_diff&#x27;</span>] = df[<span class="string">&#x27;n&#x27;</span>] - df[<span class="string">&#x27;n_1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日期变量"><a href="#日期变量" class="headerlink" title="日期变量"></a>日期变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#时间加减</span></span><br><span class="line">df[<span class="string">&#x27;time&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>] + pd.Timedelta(days=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&#x27;time&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>] - pd.Timedelta(<span class="string">&#x27;2 hours 30 minutes&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算日期差</span></span><br><span class="line">df[<span class="string">&#x27;timediff&#x27;</span>] = (df[<span class="string">&#x27;t1&#x27;</span>] - df[<span class="string">&#x27;t2&#x27;</span>]) / timedelta (days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取日期中的年</span></span><br><span class="line">df[<span class="string">&#x27;year&#x27;</span>] = df[<span class="string">&#x27;date&#x27;</span>].dt.year</span><br><span class="line"><span class="comment">#提取日期中的周</span></span><br><span class="line">df[<span class="string">&#x27;week&#x27;</span>] = df[<span class="string">&#x27;date&#x27;</span>].dt.week</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用0填补缺失值</span></span><br><span class="line">data[[<span class="string">&#x27;amount&#x27;</span>,<span class="string">&#x27;goods&#x27;</span>]] = data[[<span class="string">&#x27;amount&#x27;</span>,<span class="string">&#x27;goods&#x27;</span>]].fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用0填补缺失值</span></span><br><span class="line">data[<span class="string">&#x27;date&#x27;</span>].replace(np.nan, <span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#平均值填补缺失值</span></span><br><span class="line">vmean = data[<span class="string">&#x27;Age&#x27;</span>].mean(axis=<span class="number">0</span>, skipna=<span class="literal">True</span>)</span><br><span class="line">data[<span class="string">&#x27;Age_empflag&#x27;</span>] = data[<span class="string">&#x27;Age&#x27;</span>].isnull()</span><br><span class="line">data[<span class="string">&#x27;Age&#x27;</span>]= data[<span class="string">&#x27;Age&#x27;</span>].fillna(vmean)</span><br></pre></td></tr></table></figure><h1 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h1><h2 id="横向连接"><a href="#横向连接" class="headerlink" title="横向连接"></a>横向连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t3 = pd.merge(t1,t2, on = <span class="string">&#x27;id&#x27;</span>, how = <span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t3 = pd.merge(t1,t2 left_on = <span class="string">&#x27;id&#x27;</span>, right_on = <span class="string">&#x27;user_id&#x27;</span>, how = <span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t3 = pd.merge(t1,t2,on=[<span class="string">&#x27;user_id&#x27;</span>,<span class="string">&#x27;date&#x27;</span>], how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t3 = pd.merge(t1[[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;date&#x27;</span>]],</span><br><span class="line">              t2[[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;amount&#x27;</span>,<span class="string">&#x27;type&#x27;</span>]],</span><br><span class="line">              on = <span class="string">&#x27;id&#x27;</span>, how=<span class="string">&#x27;outer&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="纵向连接"><a href="#纵向连接" class="headerlink" title="纵向连接"></a>纵向连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = df1.append(df2)</span><br><span class="line"></span><br><span class="line">df = pd.concat([df1, df2], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="数据分组和计算Groupby"><a href="#数据分组和计算Groupby" class="headerlink" title="数据分组和计算Groupby"></a>数据分组和计算Groupby</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分组统计</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).describe()</span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).mean()</span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).size()   <span class="comment">#每组的记录数</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).ngroups   <span class="comment">#组数</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>)[<span class="string">&#x27;id&#x27;</span>].nunique().to_frame()</span><br><span class="line">df.groupby(<span class="string">&#x27;Year&#x27;</span>).get_group(<span class="number">2021</span>)    <span class="comment"># 选择一个分组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重设索引</span></span><br><span class="line">d1 = df.groupby([<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;id&#x27;</span>]).count()</span><br><span class="line">d1 = d1.reset_index(drop=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分组后排序</span></span><br><span class="line">df[<span class="string">&#x27;第几单&#x27;</span>] = df.groupby(<span class="string">&#x27;手机号&#x27;</span>)[<span class="string">&#x27;支付时间&#x27;</span>].rank()</span><br><span class="line">df[<span class="string">&#x27;排名&#x27;</span>] = df.groupby([<span class="string">&#x27;月份&#x27;</span>])[<span class="string">&#x27;订单数&#x27;</span>].rank(ascending = <span class="literal">False</span>, method = <span class="string">&#x27;dense&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="聚合计算agg"><a href="#聚合计算agg" class="headerlink" title="聚合计算agg"></a>聚合计算agg</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#聚合结果排序</span></span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>).agg(np.size).sort_values(ascending= <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名聚合结果列</span></span><br><span class="line">df2 = df.groupby(<span class="string">&#x27;id&#x27;</span>)[<span class="string">&#x27;sales&#x27;</span>].agg([(<span class="string">&#x27;avg_sales&#x27;</span>,<span class="string">&#x27;mean&#x27;</span>),     </span><br><span class="line">                                     (<span class="string">&#x27;stdev_sales&#x27;</span>,<span class="string">&#x27;std&#x27;</span>)])  </span><br><span class="line"></span><br><span class="line"><span class="comment">#对列指定多种计算方法</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>)[<span class="string">&#x27;sales&#x27;</span>].agg([np.<span class="built_in">sum</span>,np.<span class="built_in">max</span>,np.<span class="built_in">min</span>,np.mean,np.size,np.std])</span><br><span class="line"></span><br><span class="line"><span class="comment">#对列指定多种计算方法</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).agg(&#123;<span class="string">&#x27;sales&#x27;</span>:[<span class="string">&#x27;min&#x27;</span>,<span class="string">&#x27;max&#x27;</span>,<span class="string">&#x27;mean&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对多列指定不同的计算方法</span></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>).agg(&#123;<span class="string">&#x27;sales&#x27;</span>: [<span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>],</span><br><span class="line">                        <span class="string">&#x27;GMV&#x27;</span>: <span class="string">&#x27;sum&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lambda &amp; 函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_min</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;date&#x27;</span>)[<span class="string">&#x27;sales&#x27;</span>].agg(Mean=<span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line">                                Diff1 = <span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>(),  <span class="comment"># lambda </span></span><br><span class="line">                                 Diff2 = max_min )   <span class="comment">#函数  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义函数：取每个group里的前5条记录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_5</span>(<span class="params">df, c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> df[c].sort_values(ascending = <span class="literal">False</span>).head()</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&#x27;id&#x27;</span>).groupby(<span class="string">&#x27;date&#x27;</span>).apply(first_5, <span class="string">&#x27;sales&#x27;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义函数：取每个group里的第二条记录</span></span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>)[<span class="string">&#x27;date&#x27;</span>].apply(<span class="keyword">lambda</span> i:i.iloc[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(i)&gt;<span class="number">1</span> <span class="keyword">else</span> np.nan)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义函数：连接每个组内的某变量</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">df.groupby([<span class="string">&#x27;id&#x27;</span>])[<span class="string">&#x27;date&#x27;</span>].agg(<span class="keyword">lambda</span> x:<span class="string">&#x27;:&#x27;</span>.join(x))</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user&#x27;</span>)[<span class="string">&#x27;tag&#x27;</span>].apply(<span class="keyword">lambda</span> x:<span class="string">&#x27;-&#x27;</span>.join(x)).reset_index().to_frame()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#组内上下行相减</span></span><br><span class="line">df[<span class="string">&#x27;shift_1day&#x27;</span>] = df.groupby(<span class="string">&#x27;id&#x27;</span>)[<span class="string">&#x27;date&#x27;</span>].apply(<span class="keyword">lambda</span> i:i.shift(<span class="number">1</span>))</span><br><span class="line">df[<span class="string">&#x27;day_diff&#x27;</span>] = df[<span class="string">&#x27;date&#x27;</span>] - df[<span class="string">&#x27;shift_1day&#x27;</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">#分组后上下行相减：diff()函数默认用下行减上一行</span></span><br><span class="line">df[<span class="string">&#x27;diff_1day&#x27;</span>] = df.groupby(<span class="string">&#x27;id&#x27;</span>)[<span class="string">&#x27;date&#x27;</span>].apply(<span class="keyword">lambda</span> i:i.diff(<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="筛选filter"><a href="#筛选filter" class="headerlink" title="筛选filter"></a>筛选filter</h2><p>筛选满足条件的组，返回原dataframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sales只要有一个大于500的组</span></span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: (x[<span class="string">&#x27;sales&#x27;</span>] &gt; <span class="number">500</span>).<span class="built_in">any</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">#sales总和大于2000的组</span></span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:  x[<span class="string">&#x27;sales&#x27;</span>].<span class="built_in">sum</span>() &gt; <span class="number">2000</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#3条记录以上的id</span></span><br><span class="line">df.groupby(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x) &gt;= <span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇整理了常用的pandas数据探索和数据清洗语句~</summary>
    
    
    
    <category term="学习笔记" scheme="https://feifankoo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python" scheme="https://feifankoo.github.io/tags/python/"/>
    
  </entry>
  
</feed>
